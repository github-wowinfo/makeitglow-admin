{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/api.service\";\nimport * as i4 from \"./../../toast.service\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nexport let EventModalNewComponent = /*#__PURE__*/(() => {\n  class EventModalNewComponent {\n    constructor(data, ref, builder, apiService, toastService) {\n      this.data = data;\n      this.ref = ref;\n      this.builder = builder;\n      this.apiService = apiService;\n      this.toastService = toastService;\n      this.errorMessage = '';\n      this.options = [];\n      this.myForm = this.builder.group({\n        title: this.builder.control('', Validators.required),\n        description: this.builder.control('', Validators.required),\n        eventDate: this.builder.control('', Validators.required)\n      });\n    }\n\n    ngOnInit() {\n      this.inputdata = this.data;\n\n      if (this.inputdata.id > 0) {\n        this.setEditData(this.inputdata.id);\n      }\n    }\n\n    closepopup() {\n      this.ref.close();\n    }\n\n    setEditData(id) {\n      this.apiService.geteventById(id).subscribe(item => {\n        this.editData = item;\n        this.myForm.setValue({\n          title: this.editData.title,\n          description: this.editData.description,\n          eventDate: this.editData.eventDate\n        });\n      });\n    }\n\n    onFormSubmit() {\n      if (this.myForm.valid) {\n        if (this.inputdata.id > 0) {\n          this.updateFaq();\n        } else {\n          this.saveFaq();\n        }\n      } else {\n        this.toastService.showError('Please fill out the Required Fields.');\n      }\n    }\n\n    updateFaq() {\n      const updatedData = Object.assign({\n        id: this.editData.faqEntryId\n      }, this.myForm.value);\n      this.apiService.updatefaq(updatedData).subscribe(response => {\n        // Handle the response as needed\n        this.toastService.showSuccess('Faq Updated successfully!');\n        this.closepopup();\n      }, error => {\n        console.error('Error creating post:', error);\n        this.toastService.showError(error); // Optionally, you can handle errors, show a message, etc.\n      });\n    }\n\n    saveFaq() {\n      this.apiService.addfaq(this.myForm.value).subscribe(res => {\n        this.toastService.showSuccess('Event Added successfully!');\n        this.closepopup();\n      }, error => {\n        console.error('Error creating post:', error);\n        this.toastService.showError(error); // Optionally, you can handle errors, show a message, etc.\n      });\n    }\n\n  }\n\n  EventModalNewComponent.ɵfac = function EventModalNewComponent_Factory(t) {\n    return new (t || EventModalNewComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i4.ToastService));\n  };\n\n  EventModalNewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EventModalNewComponent,\n    selectors: [[\"app-event-modal-new\"]],\n    decls: 21,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\"], [\"formControlName\", \"title\", \"matInput\", \"\"], [\"matInput\", \"\", \"formControlName\", \"description\"], [\"formControlName\", \"eventDate\", \"matInput\", \"\"], [\"mat-dialog-actions\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"mat-dialog-close\", \"\"]],\n    template: function EventModalNewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function EventModalNewComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onFormSubmit();\n        });\n        i0.ɵɵelementStart(1, \"h1\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"mat-form-field\")(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Event Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-form-field\")(9, \"mat-label\");\n        i0.ɵɵtext(10, \"Event Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"textarea\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\")(13, \"mat-label\");\n        i0.ɵɵtext(14, \"Event Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 6)(17, \"button\", 7);\n        i0.ɵɵtext(18, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"button\", 8);\n        i0.ɵɵtext(20, \"Close\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.inputdata.title);\n      }\n    },\n    dependencies: [i1.MatDialogClose, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i5.MatButton, i6.MatFormField, i6.MatLabel, i7.MatInput, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName]\n  });\n  return EventModalNewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}