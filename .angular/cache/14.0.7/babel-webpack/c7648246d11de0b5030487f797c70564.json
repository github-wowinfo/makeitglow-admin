{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { Component } from '@angular/core';\nlet AddProductComponent = class AddProductComponent {\n  constructor( // @Inject() public data: any,\n  // public data: any,\n  apiService, builder, toastService, router, route) {\n    this.apiService = apiService;\n    this.builder = builder;\n    this.toastService = toastService;\n    this.router = router;\n    this.route = route;\n    this.errorMessage = '';\n    this.options = [];\n    this.catoptions = [];\n    this.subcatoptions = [];\n    this.taxoptions = [];\n    this.selectedFileName = '';\n    this.isUpdate = false; // Track if it's in update mode\n\n    this.productIdToUpdate = ''; // Product ID to update\n\n    this.myForm = this.builder.group({\n      BrndId: this.builder.control('', Validators.required),\n      CategoryId: this.builder.control('', Validators.required),\n      SubCategoryId: this.builder.control(''),\n      ItemName: this.builder.control('', Validators.required),\n      ShortDescription: this.builder.control('', Validators.required),\n      UnitType: this.builder.control('', Validators.required),\n      TaxId: this.builder.control(''),\n      LongDescription: this.builder.control('', Validators.required),\n      Benefits: this.builder.control(''),\n      HasDiemension: this.builder.control(''),\n      BatchCode: this.builder.control(''),\n      BatchInfo: this.builder.control(''),\n      MfgAt: this.builder.control(''),\n      MfgBy: this.builder.control(''),\n      MfgDateValue: this.builder.control('', Validators.required),\n      WarrantyInMonth: this.builder.control(''),\n      Remark: this.builder.control(''),\n      VendorInfo: this.builder.control(''),\n      Policy: this.builder.control(''),\n      MetaTags: this.builder.control(''),\n      Metapropertyurl: this.builder.control(''),\n      Metapropertytype: this.builder.control(''),\n      Metapropertytitle: this.builder.control(''),\n      Metapropertydescription: this.builder.control(''),\n      Srno: this.builder.control('', Validators.required),\n      BarCodeNo: this.builder.control('', Validators.required),\n      ItemTitle: this.builder.control('', Validators.required),\n      IsAvailabile: this.builder.control(true),\n      IsBuyable: this.builder.control(true),\n      HexColorCode: this.builder.control('', Validators.required),\n      HowToUse: this.builder.control('', Validators.required),\n      UnitVolume: this.builder.control('', Validators.required),\n      ThumbnailFile: ['', Validators.required],\n      MainImage1File: ['', Validators.required],\n      Image2File: ['', Validators.required],\n      Image3File: ['', Validators.required]\n    });\n  } // onFileSelected(event) {\n  //   console.log(event.target.files)\n  // }\n\n\n  ngOnInit() {\n    // this.inputdata = this.data;\n    this.brandData();\n    this.categoryData();\n    this.SubcategoryData();\n    this.TaxRate();\n    this.route.paramMap.subscribe(params => {\n      this.productIdToUpdate = params.get('productId') || '';\n\n      if (this.productIdToUpdate) {\n        // Populate form for update\n        this.populateFormForUpdate();\n      }\n    }); // Example: Initialize isUpdate and productIdToUpdate directly\n\n    const updateMode = true; // Set to true if in update mode\n\n    const productId = 'your_product_id_here'; // Set the product ID to update\n\n    if (updateMode) {\n      this.isUpdate = true;\n      this.productIdToUpdate = productId;\n      this.populateFormForUpdate();\n    }\n  }\n\n  brandData() {\n    this.apiService.getPosts().subscribe(data => {\n      // console.log('data', data);\n      this.options = data;\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n\n  categoryData() {\n    this.apiService.getCategory().subscribe(data => {\n      // console.log('data', data);\n      this.catoptions = data;\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n\n  SubcategoryData() {\n    this.apiService.getsubCategory().subscribe(data => {\n      // console.log('data', data);\n      this.subcatoptions = data;\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n\n  TaxRate() {\n    this.apiService.getTax().subscribe(data => {\n      // console.log('data', data);\n      this.taxoptions = data;\n    }, error => {\n      console.error('Error fetching data:', error);\n    });\n  }\n\n  onFileChange(event) {\n    var _a;\n\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      (_a = this.myForm.get('ThumbnailFile')) === null || _a === void 0 ? void 0 : _a.setValue(file); // Set to file object\n    }\n  }\n\n  onMain1FileChange(event) {\n    var _a;\n\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      (_a = this.myForm.get('MainImage1File')) === null || _a === void 0 ? void 0 : _a.setValue(file); // Set to file object\n    }\n  }\n\n  onMain3FileChange(event) {\n    var _a;\n\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      (_a = this.myForm.get('Image3File')) === null || _a === void 0 ? void 0 : _a.setValue(file); // Set to file object\n    }\n  }\n\n  onMain2FileChange(event) {\n    var _a;\n\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      (_a = this.myForm.get('Image2File')) === null || _a === void 0 ? void 0 : _a.setValue(file); // Set to file object\n    }\n  }\n\n  populateFormForUpdate() {\n    // Use the productIdToUpdate to fetch the existing product data and populate the form\n    // Example:\n    this.apiService.getProductById(this.productIdToUpdate).subscribe(data => {\n      this.myForm.patchValue(data);\n    }, error => {\n      console.error('Error fetching product data for update:', error);\n    });\n  }\n\n  onFormSubmit() {\n    // if (this.myForm.valid) {\n    //   this.saveProduct();\n    // } else {\n    //   this.toastService.showError('Please fill out the Required Fields.');\n    // }\n    if (this.myForm.valid) {\n      if (this.isUpdate) {\n        this.updateProduct();\n      } else {\n        this.saveProduct();\n      }\n    } else {\n      this.toastService.showError('Please fill out the Required Fields.');\n    }\n  }\n\n  updateProduct() {\n    const formData = new FormData();\n    Object.keys(this.myForm.value).forEach(key => {\n      formData.append(key, this.myForm.value[key]);\n    }); // Add the product ID to update\n\n    formData.append('id', this.productIdToUpdate);\n    this.apiService.updateProduct(formData).subscribe(res => {\n      this.toastService.showSuccess('Product Updated successfully!'); // Optionally, navigate to a different route or do something else after update\n    }, error => {\n      console.error('Error updating product:', error);\n      this.toastService.showError(error);\n    });\n  }\n\n  saveProduct() {\n    const formData = new FormData(); // Append each field of myForm to FormData\n\n    Object.keys(this.myForm.value).forEach(key => {\n      formData.append(key, this.myForm.value[key]);\n    });\n    console.log('formData', formData, this.myForm.value);\n    this.apiService.addProduct(formData).subscribe(res => {\n      this.toastService.showSuccess('Product Added successfully!');\n      location.reload();\n    }, error => {\n      console.error('Error creating post:', error);\n      this.toastService.showError(error); // Optionally, you can handle errors, show a message, etc.\n    });\n  }\n\n};\nAddProductComponent = __decorate([Component({\n  selector: 'app-add-product',\n  templateUrl: './add-product.component.html',\n  styleUrls: ['./add-product.component.scss']\n})], AddProductComponent);\nexport { AddProductComponent };","map":null,"metadata":{},"sourceType":"module"}