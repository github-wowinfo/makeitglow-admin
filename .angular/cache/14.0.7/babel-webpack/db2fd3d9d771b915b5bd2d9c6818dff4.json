{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"src/app/api.service\";\nimport * as i4 from \"./../../toast.service\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/card\";\nexport let EventMediaModalComponent = /*#__PURE__*/(() => {\n  class EventMediaModalComponent {\n    constructor(data, ref, builder, apiService, toastService) {\n      this.data = data;\n      this.ref = ref;\n      this.builder = builder;\n      this.apiService = apiService;\n      this.toastService = toastService;\n      this.errorMessage = '';\n      this.options = [];\n      this.myForm = this.builder.group({\n        EventId: this.data.id,\n        UploadImageFiles: ['', Validators.required]\n      });\n    }\n\n    ngOnInit() {\n      this.inputdata = this.data; // if (this.inputdata.id > 0) {\n      //   this.setEditData(this.inputdata.id);\n      // }\n    } // onFileChange(event: any) {\n    //   if (event.target.files.length > 0) {\n    //     const file = event.target.files[0];\n    //     this.myForm.get('UploadImageFiles')?.setValue(file); // Set to file object\n    //   }\n    // }\n\n\n    onFileChange(event) {\n      var _a;\n\n      const files = event.target.files;\n\n      if (files.length > 0) {\n        // const formData = new FormData();\n        for (let i = 0; i < files.length; i++) {\n          // formData.append('images', files[i]);\n          (_a = this.myForm.get('UploadImageFiles')) === null || _a === void 0 ? void 0 : _a.setValue(files[i]);\n        } // Now you can send formData to your server using HttpClient\n        // For example, if you have a service method to upload images:\n        // this.uploadImages(formData);\n\n      }\n    }\n\n    closepopup() {\n      this.ref.close();\n    } // setEditData(id: any) {\n    //   this.apiService.geteventById(id).subscribe(item => {\n    //     this.editData = item;\n    //     const eventDate = new Date(item.eventDate);\n    //     const day = eventDate.getDate().toString().padStart(2, '0'); // Add zero padding for single-digit days\n    //     const month = (eventDate.getMonth() + 1).toString().padStart(2, '0'); // Add zero padding for single-digit months\n    //     const year = eventDate.getFullYear();\n    //     const formattedEventDate = `${day}/${month}/${year}`;\n    //     this.myForm.setValue({\n    //       title: this.editData.title,\n    //       description: this.editData.description,\n    //       eventDate: formattedEventDate\n    //     });\n    //   });\n    // }\n\n\n    onFormSubmit() {\n      if (this.myForm.valid) {\n        // if (this.inputdata.id > 0) {\n        //   this.updateEvent();\n        // } else {\n        // }\n        this.saveEvent();\n      } else {\n        this.toastService.showError('Please fill out the Required Fields.');\n      }\n    } // updateEvent() {\n    //   const updatedData = {\n    //     id: this.editData.eventEntryId,\n    //     ...this.myForm.value\n    //   };\n    //   this.apiService.updateevent(updatedData).subscribe(response => {\n    //     // Handle the response as needed\n    //     this.toastService.showSuccess('Event Updated successfully!');\n    //     this.closepopup();\n    //   },\n    //     (error) => {\n    //       console.error('Error creating post:', error);\n    //       this.toastService.showError(error);\n    //       // Optionally, you can handle errors, show a message, etc.\n    //     }\n    //   );\n    // }\n\n\n    saveEvent() {\n      const formData = new FormData(); // Append each field of myForm to FormData\n\n      Object.keys(this.myForm.value).forEach(key => {\n        formData.append(key, this.myForm.value[key]);\n      });\n      console.log('this.myForm.value', this.myForm.value);\n      this.apiService.addeventMedia(formData).subscribe(res => {\n        this.toastService.showSuccess('Event Added successfully!');\n        this.closepopup();\n      }, error => {\n        console.error('Error creating post:', error);\n        this.toastService.showError(error); // Optionally, you can handle errors, show a message, etc.\n      });\n    }\n\n  }\n\n  EventMediaModalComponent.ɵfac = function EventMediaModalComponent_Factory(t) {\n    return new (t || EventMediaModalComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ApiService), i0.ɵɵdirectiveInject(i4.ToastService));\n  };\n\n  EventMediaModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EventMediaModalComponent,\n    selectors: [[\"app-event-media-modal\"]],\n    decls: 13,\n    vars: 1,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\"], [1, \"mb-3\"], [\"type\", \"file\", \"multiple\", \"\", \"formControlName\", \"UploadImageFiles\", 1, \"d-block\", 3, \"change\"], [\"mat-dialog-actions\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", \"mat-dialog-close\", \"\"]],\n    template: function EventMediaModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function EventMediaModalComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.onFormSubmit();\n        });\n        i0.ɵɵelementStart(1, \"h1\", 1);\n        i0.ɵɵtext(2, \"Add Event Media\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"mat-card\", 3)(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Event Media\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"input\", 4);\n        i0.ɵɵlistener(\"change\", function EventMediaModalComponent_Template_input_change_7_listener($event) {\n          return ctx.onFileChange($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(8, \"div\", 5)(9, \"button\", 6);\n        i0.ɵɵtext(10, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"button\", 7);\n        i0.ɵɵtext(12, \"Close\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      }\n    },\n    dependencies: [i1.MatDialogClose, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i5.MatButton, i6.MatLabel, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i7.MatCard]\n  });\n  return EventMediaModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}