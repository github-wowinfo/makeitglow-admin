{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { DeleteConfirmationComponent } from './../../delete-confirmation/delete-confirmation.component';\nimport { Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\nlet ViewProductComponent = class ViewProductComponent {\n  constructor(route, apiService, toastService, dialog) {\n    this.route = route;\n    this.apiService = apiService;\n    this.toastService = toastService;\n    this.dialog = dialog;\n    this.product = [];\n    this.dataSource = new MatTableDataSource();\n    this.displayedColumns = ['vrntEntryId', 'itemTitle', 'barCodeNo', 'isAvailabile', 'isBuyable', 'availableStock', 'action'];\n  }\n\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      // Retrieve the 'id' parameter from the URL\n      this.id = params.get('id');\n      console.log(this.id);\n      this.loadProduct(this.id);\n    });\n  }\n\n  loadProduct(id) {\n    this.apiService.getProductById(id).subscribe(response => {\n      this.product = response;\n      console.log(response);\n      this.dataSource = new MatTableDataSource(this.product.vrnts);\n    }, error => {\n      console.error('Error creating post:', error); // Optionally, you can handle errors, show a message, etc.\n    });\n  }\n\n  deleteProductVariant(id) {\n    const dialogRef = this.dialog.open(DeleteConfirmationComponent);\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion\n        this.apiService.deleteProductVariant(id).subscribe(response => {\n          this.toastService.showSuccess('Variant Deleted successfully!');\n          this.loadProduct(id);\n          console.log('Delete successful', response);\n        });\n      }\n    });\n  }\n\n  ngAfterViewInit() {\n    // Check if the necessary components are defined before accessing their properties\n    if (this.sort && this.paginator && this.table) {\n      this.dataSource.sort = this.sort;\n      this.dataSource.paginator = this.paginator;\n      this.table.dataSource = this.dataSource;\n    } else {\n      console.error('One or more required components are undefined.');\n    }\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator)], ViewProductComponent.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild(MatSort)], ViewProductComponent.prototype, \"sort\", void 0);\n\n__decorate([ViewChild(MatTable)], ViewProductComponent.prototype, \"table\", void 0);\n\nViewProductComponent = __decorate([Component({\n  selector: 'app-view-product',\n  templateUrl: './view-product.component.html',\n  styleUrls: ['./view-product.component.scss']\n})], ViewProductComponent);\nexport { ViewProductComponent };","map":null,"metadata":{},"sourceType":"module"}