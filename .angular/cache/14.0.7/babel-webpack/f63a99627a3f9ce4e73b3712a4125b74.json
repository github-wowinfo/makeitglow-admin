{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { DeleteConfirmationComponent } from './../../delete-confirmation/delete-confirmation.component';\nimport { Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\nlet ProductTableComponent = class ProductTableComponent {\n  constructor(router, apiService, dialog, toastService) {\n    this.router = router;\n    this.apiService = apiService;\n    this.dialog = dialog;\n    this.toastService = toastService;\n    /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n\n    this.product = [];\n    this.dataSource = new MatTableDataSource();\n    /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n\n    this.displayedColumns = ['ItemEntryId', 'itemName', 'shortDescription', 'hasVariant', 'action'];\n    this.loadProduct();\n  }\n\n  loadProduct() {\n    this.apiService.getProducts().subscribe(response => {\n      this.product = response;\n      this.dataSource = new MatTableDataSource(this.product);\n    }, error => {\n      console.error('Error creating post:', error); // Optionally, you can handle errors, show a message, etc.\n    });\n  }\n\n  onSlideToggleChange(id, currentVariant) {\n    const newVariant = !currentVariant; // Flip the value\n\n    this.setVariant(id, newVariant);\n  }\n\n  setVariant(id, variant) {\n    this.apiService.EnableDisableHasVariant(id, variant).subscribe(response => {\n      this.toastService.showSuccess('Variant Updated successfully!');\n      this.loadProduct();\n      console.log('variant', response);\n    }, error => {\n      console.error('Error creating post:', error);\n      this.toastService.showError(error.message); // Optionally, you can handle errors, show a message, etc.\n    });\n  }\n\n  deleteProduct(id) {\n    const dialogRef = this.dialog.open(DeleteConfirmationComponent);\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        // User confirmed deletion\n        this.apiService.deleteProduct(id).subscribe(response => {\n          this.toastService.showSuccess('Brand Deleted successfully!');\n          this.loadProduct();\n          console.log('Delete successful', response);\n        });\n      }\n    });\n  }\n\n  redirectToAnotherComponent(id) {\n    console.log('clicked');\n    this.router.navigate(['/viewProduct', id]);\n  } // ngAfterViewInit(): void {\n  //   this.dataSource.sort = this.sort;\n  //   this.dataSource.paginator = this.paginator;\n  //   this.table.dataSource = this.dataSource;\n  // }\n\n\n  ngAfterViewInit() {\n    // Check if the necessary components are defined before accessing their properties\n    if (this.sort && this.paginator && this.table) {\n      this.dataSource.sort = this.sort;\n      this.dataSource.paginator = this.paginator;\n      this.table.dataSource = this.dataSource;\n    } else {\n      console.error('One or more required components are undefined.');\n    }\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator)], ProductTableComponent.prototype, \"paginator\", void 0);\n\n__decorate([ViewChild(MatSort)], ProductTableComponent.prototype, \"sort\", void 0);\n\n__decorate([ViewChild(MatTable)], ProductTableComponent.prototype, \"table\", void 0);\n\nProductTableComponent = __decorate([Component({\n  selector: 'app-product-table',\n  templateUrl: './product-table.component.html',\n  styleUrls: ['./product-table.component.scss']\n})], ProductTableComponent);\nexport { ProductTableComponent };","map":null,"metadata":{},"sourceType":"module"}