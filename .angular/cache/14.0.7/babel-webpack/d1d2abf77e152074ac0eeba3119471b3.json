{"ast":null,"code":"import { environment } from './../../../environments/environment';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/icon\";\nimport * as i3 from \"@angular/material/table\";\nimport * as i4 from \"@angular/material/paginator\";\nimport * as i5 from \"@angular/material/sort\";\n\nfunction BrandTableComponent_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 10);\n    i0.ɵɵtext(1, \"Name\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction BrandTableComponent_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(row_r7 == null ? null : row_r7.brndName);\n  }\n}\n\nfunction BrandTableComponent_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 10);\n    i0.ɵɵtext(1, \"Action\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction BrandTableComponent_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 11)(1, \"mat-icon\", 12);\n    i0.ɵɵtext(2, \"edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-icon\", 12);\n    i0.ɵɵtext(4, \"delete\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction BrandTableComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\n\nfunction BrandTableComponent_tr_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\n\nconst _c0 = function () {\n  return [5, 10, 20];\n};\n\nexport let BrandTableComponent = /*#__PURE__*/(() => {\n  class BrandTableComponent {\n    constructor(http) {\n      this.http = http;\n      this.dataSource = new MatTableDataSource(); // Use MatTableDataSource for sorting and pagination\n\n      /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n\n      this.displayedColumns = ['name', 'Action'];\n    }\n\n    ngOnInit() {\n      this.getMethod();\n    }\n\n    getMethod() {\n      this.http.get(`${environment.apiUrl}/api/Masters/GetAllBrands`).subscribe(data => {\n        console.log('data', data);\n        this.dataSource.data = data; // Set data to MatTableDataSource\n      });\n    }\n\n    ngAfterViewInit() {\n      this.dataSource.sort = this.sort;\n      this.dataSource.paginator = this.paginator;\n    }\n\n  }\n\n  BrandTableComponent.ɵfac = function BrandTableComponent_Factory(t) {\n    return new (t || BrandTableComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  BrandTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BrandTableComponent,\n    selectors: [[\"app-brand-table\"]],\n    viewQuery: function BrandTableComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MatPaginator, 5);\n        i0.ɵɵviewQuery(MatSort, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n      }\n    },\n    decls: 12,\n    vars: 7,\n    consts: [[1, \"mat-elevation-z8\"], [\"mat-table\", \"\", \"matSort\", \"\", \"aria-label\", \"Elements\", 1, \"full-width-table\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"Action\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"aria-label\", \"Select page\", 3, \"length\", \"pageIndex\", \"pageSize\", \"pageSizeOptions\"], [\"paginator\", \"\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [2, \"cursor\", \"pointer\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\"]],\n    template: function BrandTableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1);\n        i0.ɵɵelementContainerStart(2, 2);\n        i0.ɵɵtemplate(3, BrandTableComponent_th_3_Template, 2, 0, \"th\", 3);\n        i0.ɵɵtemplate(4, BrandTableComponent_td_4_Template, 2, 1, \"td\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵelementContainerStart(5, 5);\n        i0.ɵɵtemplate(6, BrandTableComponent_th_6_Template, 2, 0, \"th\", 3);\n        i0.ɵɵtemplate(7, BrandTableComponent_td_7_Template, 5, 0, \"td\", 4);\n        i0.ɵɵelementContainerEnd();\n        i0.ɵɵtemplate(8, BrandTableComponent_tr_8_Template, 1, 0, \"tr\", 6);\n        i0.ɵɵtemplate(9, BrandTableComponent_tr_9_Template, 1, 0, \"tr\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"mat-paginator\", 8, 9);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"length\", ctx.dataSource == null ? null : ctx.dataSource.data == null ? null : ctx.dataSource.data.length)(\"pageIndex\", 0)(\"pageSize\", 10)(\"pageSizeOptions\", i0.ɵɵpureFunction0(6, _c0));\n      }\n    },\n    dependencies: [i2.MatIcon, i3.MatTable, i3.MatHeaderCellDef, i3.MatHeaderRowDef, i3.MatColumnDef, i3.MatCellDef, i3.MatRowDef, i3.MatHeaderCell, i3.MatCell, i3.MatHeaderRow, i3.MatRow, i4.MatPaginator, i5.MatSort, i5.MatSortHeader],\n    styles: [\".full-width-table[_ngcontent-%COMP%]{width:100%}\"]\n  });\n  return BrandTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}